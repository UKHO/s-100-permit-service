using ICSharpCode.SharpZipLib.Checksum;
using System.Text;

namespace UKHO.S100PermitService.Common.Validations
{
    public static class ChecksumValidation
    {
        private const int EncryptedHardwareIdLength = 32;
        private const int ReverseChecksumIndex = 6;

        /// <summary>
        /// Validate checksum of user permit.
        /// </summary>
        /// <remarks>
        /// The Check Sum is an 8 digit hexadecimal number. It is generated by taking the encrypted HW_ID and converting it to a 32 character hexadecimal string.
        /// The string is then hashed using the algorithm CRC32 and the 4 bytes converted to an 8 character hexadecimal string.
        /// The Check Sum is not encrypted and allows the integrity of the user permit to be checked.
        /// If generated checksum value from encrypted HW_ID is not matched with provided checksum from upn, Then checksum validation fails and return false.
        /// </remarks>
        /// <param name="upn">User Permit Number.</param>
        /// <returns>true is checksum validated else false</returns>
        public static bool IsValid(string upn)
        {
            var hwIdEncrypted = upn[..EncryptedHardwareIdLength];
            var checksum = upn[EncryptedHardwareIdLength..^ReverseChecksumIndex];

            var crc = new Crc32();
            crc.Update(Encoding.UTF8.GetBytes(hwIdEncrypted));
            var calculatedChecksum = crc.Value.ToString("X8");
            return calculatedChecksum.Equals(checksum);
        }
    }
}