name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd).$(BuildCounter)

parameters:

  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

  - name: Snyk
    displayName: "Disable Snyk Checking"
    type: boolean
    default: false

  - name: DisableStryker
    displayName: "Disable Stryker Test Mutation"
    type: boolean
    default: false
    
trigger:
  - main
  - release/*
  - develop 

pool: 
    name: NautilusBuild
    demands: vs_16 -equals 1 #exclude agents 13 and 14 as code coverage report fails 

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: UKHOAssemblyCompany
    value: "UK Hydrographic Office"
  - name: UKHOAssemblyVersionPrefix
    value: "1.0."
  - name: UKHOAssemblyProduct
    value: "S-100 Permit Service"
  - name: UKHOAssemblyCopyright
    value: "Copyright Â© UK Hydrographic Office"
  - name: WindowsPool
    value: "NautilusBuild"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.9.2"
  - name: DeploymentPool
    value: "Mare Nectaris"
  - name: CoverageThresholdLimit
    value: "90"
  - name: DeploymentPoolPE
    value: "Private Link Deployments (ENG)"
  - name: DeploymentPoolPD
    value: "Private Link Deployments (BUS)"
  - name: snykAbzuOrganizationId
    value: "aeb7543b-8394-457c-8334-a31493d8910d"

resources:
  repositories:
  - repository: UKHOTemplates
    type: github
    name: UKHO/devops-pipelinetemplates
    endpoint: UKHO
    ref: refs/heads/main

stages:
  - stage: VulnerabilityChecks
    displayName: Snyk checks
    dependsOn: []
    jobs:
    - template: Deployment/templates/vulnerability-checks.yml    
      parameters:
        SnykOnlyFailIfFixable: ${{ parameters.SnykOnlyFailIfFixable }}
        SnykPassOnIssues: ${{ parameters.SnykPassOnIssues }}

  - stage: Stryker_Mutator
    displayName: "Stryker Mutator"
    condition: ${{ eq(parameters.DisableStryker, false) }}
    dependsOn: []
    jobs:
      - job: Stryker      
        workspace:
          clean: all        
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 8.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: 'Install Stryker'
            inputs:
              command: 'custom'
              custom: 'tool'
              arguments: 'install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools'

          - task: Powershell@2
            displayName: 'Run Stryker Permit Service API UnitTests'
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)/tests/UKHO.S100PermitService.API.UnitTests'
              targetType: 'inline'
              pwsh: true
              script: $(Agent.BuildDirectory)/tools/dotnet-stryker

          - task: PublishMutationReport@0
            displayName: 'Publish Strkyer Mutator PS API Report'
            inputs:
              reportPattern: '$(Build.SourcesDirectory)/tests/UKHO.S100PermitService.API.UnitTests/**/mutation-report.html'
              reportDisplayName: 'Permit Service API Mutation Report'

          - task: Powershell@2
            displayName: "Run Stryker Permit Service Common UnitTests"
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)/tests/UKHO.S100PermitService.Common.UnitTests'
              targetType: 'inline'
              pwsh: true
              script: $(Agent.BuildDirectory)/tools/dotnet-stryker

          - task: PublishMutationReport@0
            displayName: 'Publish Strkyer Mutator PS Common Report'
            inputs:
              reportPattern: '$(Build.SourcesDirectory)/tests/UKHO.S100PermitService.Common.UnitTests/**/mutation-report.html'
              reportDisplayName: 'Permit Service Common Mutation Report'

  - stage: SnykCheck_Build_Test_Publish
    displayName: "Snyk Check ,Build, Test and Publish"
    dependsOn: []
    jobs:
      - template: Deployment/templates/build-test-publish.yml
    
  - stage: Devdeploy
    displayName: "Devdeploy (inc terraform, webapp deploy)"
    # variables:
    #   - group: "S-100-PG-Dev"
    #   - group: "S-100-PG-Dev-TF"
    #   - group: "S-100-PG-Dev-KV"
    #   - name: "AzureAdConfiguration.TenantId"
    #     value: $(EntraID.TenantId)
    #   - name: "AzureAdConfiguration.ClientId"
    #     value: $(EntraID.ApplicationId)      
    jobs:
      - template: Deployment/templates/continuous-deployment.yml
        parameters:
          AzureDevOpsEnvironment: "S100PG-DEV"
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "S-100 Permit Generator Dev - A.011.15.5"
          ShortName: "Dev"
          AppPool: $(DeploymentPoolPE)
          Container: ${{variables.Container}}          
          RunFunctionalTests: true 

      # - deployment: DevDeployTerraform
      #   displayName: "Dev - Deploy Terraform"
      #   environment: "S100PG-DEV"
      #   pool: $(DeploymentPool)
      #   container: ${{variables.Container}}
      #   workspace:
      #     clean: all
      #   strategy:
      #     runOnce:
      #       deploy:
      #         steps:
      #           - template: Deployment/templates/continuous-deployment.yml
      #             parameters:
      #               ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
      #               AzureSubscription: "S-100 Permit Generator Dev - A.011.15.5"

      # - deployment: DevDeployApp
      #   dependsOn: DevDeployTerraform
      #   displayName: "Dev - Deploy Dotnet App"
      #   environment: "S100PG-DEV"
      #   pool: $(DeploymentPoolPE)
      #   variables:
      #     - name : WEB_APP_NAME
      #       value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.WEB_APP'] ]
      #     - name : STUB_WEB_APP_NAME
      #       value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.stubWebApp'] ]
      #     - name : KeyVaultSettings.ServiceUri
      #       value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
      #   workspace:
      #     clean: all
      #   strategy:
      #     runOnce:
      #       deploy:
      #         steps:
      #           - template: Deployment/templates/continuous-deployment-app.yml
      #             parameters:
      #               AzureSubscription: "S-100 Permit Generator Dev - A.011.15.5"
  
      # - job: FunctionalTests
      #   dependsOn:
      #   - DevDeployTerraform
      #   - DevDeployApp
      #   pool: $(DeploymentPoolPE)
      #   variables:
      #     - name: "TokenConfiguration.TenantId"
      #       value: $(EntraID.TenantId)
      #     - name: "TokenConfiguration.ClientId"
      #       value: $(EntraID.ApplicationId)
      #     - name: "TokenConfiguration.ClientIdWithAuth"
      #       value: $(EntraID.AutoTest.ApplicationId)
      #     - name: "TokenConfiguration.ClientIdNoAuth"
      #       value: $(EntraID.AutoTestNoAuth.ApplicationId)
      #     - name: "TokenConfiguration.ClientSecret"
      #       value: $(TokenConfiguration--ClientSecret)
      #     - name: "TokenConfiguration.ClientSecretNoAuth"
      #       value: $(TokenConfiguration--ClientSecretNoAuth)
      #     - name : KeyVaultSettings.ServiceUri
      #       value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
      #   displayName: "Dev Functional Automated Tests"
      #   workspace:
      #    clean: all
      #   steps:
      #     - template: Deployment/templates/continuous-testing.yml
      #       parameters:
      #         AzureSubscription: "S-100 Permit Generator Dev - A.011.15.5"

  - stage: vNextIATDeploy
    dependsOn:  Devdeploy
    displayName: "vNext IATdeploy (inc terraform, webapp deploy)"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'),startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/'),startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')))
    # variables:
    #   - group: "S-100-PG-vNextIAT"
    #   - group: "S-100-PG-vNextIAT-TF"
    #   - group: "S-100-PG-vNextIAT-KV"
    #   - name: "AzureAdConfiguration.TenantId"
    #     value: $(EntraID.TenantId)
    #   - name: "AzureAdConfiguration.ClientId"
    #     value: $(EntraID.ApplicationId)      
    # jobs:
    #   - deployment: vNextIATDeployTerraform
    #     displayName: "vNextIAT - Deploy Terraform"
    #     environment: "S100PG-VNEXTIAT"
    #     pool: $(DeploymentPool)
    #     container: ${{variables.Container}}
    #     workspace:
    #       clean: all
    #     strategy:
    #       runOnce:
    #         deploy:
    #           steps:
    #             - template: Deployment/templates/continuous-deployment.yml
    #               parameters:
    #                 ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
    #                 AzureSubscription: "S-100 Permit Generator vNext-IAT - A.011.15.5"
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "S100PG-VNEXTIAT"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "S-100 Permit Generator vNext-IAT - A.011.15.5"
        ShortName: "vNextIAT"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}         
      
      # - deployment: vNextIATDeployApp
      #   dependsOn: vNextIATDeployTerraform
      #   displayName: "vNextIAT - Deploy Dotnet App"
      #   environment: "S100PG-VNEXTIAT"
      #   pool: $(DeploymentPoolPE)
      #   variables:
      #     - name : WEB_APP_NAME
      #       value : $[ dependencies.vNextIATDeployTerraform.outputs['vNextIATDeployTerraform.TerraformDeploy.WEB_APP'] ]
      #     - name : STUB_WEB_APP_NAME
      #       value : $[ dependencies.vNextIATDeployTerraform.outputs['vNextIATDeployTerraform.TerraformDeploy.stubWebApp'] ]
      #     - name : KeyVaultSettings.ServiceUri
      #       value : $[ dependencies.vNextIATDeployTerraform.outputs['vNextIATDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
      #   workspace:
      #     clean: all
      #   strategy:
      #     runOnce:
      #       deploy:
      #         steps:
      #           - template: Deployment/templates/continuous-deployment-app.yml
      #             parameters:
      #               AzureSubscription: "S-100 Permit Generator vNext-IAT - A.011.15.5"
  
  - stage: vNextE2EDeploy
    dependsOn: vNextIATDeploy
    displayName: "vNextE2Edeploy (inc terraform, webapp deploy)"    
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'),startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/'),startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')))
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "S100PG-VNEXTE2E"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "S-100 Permit Generator vNext-E2E - A.011.15.5"
        ShortName: "VNEXTE2E"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}
    # variables:
    #   - group: "S-100-PG-vNextE2E"
    #   - group: "S-100-PG-vNextE2E-TF"
    #   - group: "S-100-PG-vNextE2E-KV"
    #   - name: "AzureAdConfiguration.TenantId"
    #     value: $(EntraID.TenantId)
    #   - name: "AzureAdConfiguration.ClientId"
    #     value: $(EntraID.ApplicationId)      
    # jobs:
    #   - deployment: vNextE2EDeployTerraform
    #     displayName: "vNextE2E - Deploy Terraform"
    #     environment: "S100PG-VNEXTE2E"
    #     pool: $(DeploymentPool)
    #     container: ${{variables.Container}}
    #     workspace:
    #       clean: all
    #     strategy:
    #       runOnce:
    #         deploy:
    #           steps:
    #             - template: Deployment/templates/continuous-deployment.yml
    #               parameters:
    #                 ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
    #                 AzureSubscription: "S-100 Permit Generator vNext-E2E - A.011.15.5"

    #   - deployment: vNextE2EDeployApp
    #     dependsOn: vNextE2EDeployTerraform
    #     displayName: "vNextE2E - Deploy Dotnet App"
    #     environment: "S100PG-VNEXTE2E"
    #     pool: $(DeploymentPoolPE)
    #     variables:
    #       - name : WEB_APP_NAME
    #         value : $[ dependencies.vNextE2EDeployTerraform.outputs['vNextE2EDeployTerraform.TerraformDeploy.WEB_APP'] ]
    #       - name : STUB_WEB_APP_NAME
    #         value : $[ dependencies.vNextE2EDeployTerraform.outputs['vNextE2EDeployTerraform.TerraformDeploy.stubWebApp'] ]
    #       - name : KeyVaultSettings.ServiceUri
    #         value : $[ dependencies.vNextE2EDeployTerraform.outputs['vNextE2EDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
    #     workspace:
    #       clean: all
    #     strategy:
    #       runOnce:
    #         deploy:
    #           steps:
    #             - template: Deployment/templates/continuous-deployment-app.yml
    #               parameters:
    #                 AzureSubscription: "S-100 Permit Generator vNext-E2E - A.011.15.5"
  
  - stage: IATDeploy
    dependsOn:  Devdeploy
    displayName: "IATdeploy (inc terraform, webapp deploy)"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "S100PG-IAT"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "S-100 Permit Generator IAT - A.011.15.5"
        ShortName: "IAT"
        AppPool: $(DeploymentPoolPE)
        Container: ${{variables.Container}}
        RunFunctionalTests: true 
    # variables:
    #   - group: "S-100-PG-IAT"
    #   - group: "S-100-PG-IAT-TF"
    #   - group: "S-100-PG-IAT-KV"
    #   - name: "AzureAdConfiguration.TenantId"
    #     value: $(EntraID.TenantId)
    #   - name: "AzureAdConfiguration.ClientId"
    #     value: $(EntraID.ApplicationId)        
    # jobs:
    #   - deployment: IATDeployTerraform
    #     displayName: "IAT - Deploy Terraform"
    #     environment: "S100PG-IAT"
    #     pool: $(DeploymentPool)
    #     container: ${{variables.Container}}
    #     workspace:
    #       clean: all
    #     strategy:
    #       runOnce:
    #         deploy:
    #           steps:
    #             - template: Deployment/templates/continuous-deployment.yml
    #               parameters:
    #                 ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
    #                 AzureSubscription: "S-100 Permit Generator IAT - A.011.15.5"

      # - deployment: IATDeployApp
      #   dependsOn: IATDeployTerraform
      #   displayName: "IAT - Deploy Dotnet App"
      #   environment: "S100PG-IAT"
      #   pool: $(DeploymentPoolPE)
      #   variables:
      #     - name : WEB_APP_NAME
      #       value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.WEB_APP'] ]
      #     - name : STUB_WEB_APP_NAME
      #       value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.stubWebApp'] ]
      #     - name : KeyVaultSettings.ServiceUri
      #       value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
      #   workspace:
      #     clean: all
      #   strategy:
      #     runOnce:
      #       deploy:
      #         steps:
      #           - template: Deployment/templates/continuous-deployment-app.yml
      #             parameters:
      #               AzureSubscription: "S-100 Permit Generator IAT - A.011.15.5"

  - stage: PreProdDeploy
    dependsOn:  IATDeploy
    displayName: "PreProdDeploy (inc terraform, webapp deploy)"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "S100PG-PreProd"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "S-100 Permit Generator PreProd - A.011.15.5"
        ShortName: "PreProd"
        AppPool: $(DeploymentPoolPD)
        Container: ${{variables.Container}}

    # variables:
    #   - group: "S-100-PG-PreProd"
    #   - group: "S-100-PG-PreProd-TF"
    #   - group: "S-100-PG-PreProd-KV"
    #   - name: "AzureAdConfiguration.TenantId"
    #     value: $(EntraID.TenantId)
    #   - name: "AzureAdConfiguration.ClientId"
    #     value: $(EntraID.ApplicationId)        
    # jobs:
    #   - deployment: PreProdDeployTerraform
    #     displayName: "PreProd - Deploy Terraform"
    #     environment: "S100PG-PreProd"
    #     pool: $(DeploymentPool)
    #     container: ${{variables.Container}}
    #     workspace:
    #       clean: all
    #     strategy:
    #       runOnce:
    #         deploy:
    #           steps:
    #             - template: Deployment/templates/continuous-deployment.yml
    #               parameters:
    #                 ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
    #                 AzureSubscription: "S-100 Permit Generator PreProd - A.011.15.5"

    #   - deployment: PreProdDeployApp
    #     dependsOn: PreProdDeployTerraform
    #     displayName: "PreProd - Deploy Dotnet App"
    #     environment: "S100PG-PreProd"
    #     pool: $(DeploymentPoolPD)
    #     variables:
    #       - name : WEB_APP_NAME
    #         value : $[ dependencies.PreProdDeployTerraform.outputs['PreProdDeployTerraform.TerraformDeploy.WEB_APP'] ]
    #       - name : STUB_WEB_APP_NAME
    #         value : $[ dependencies.PreProdDeployTerraform.outputs['PreProdDeployTerraform.TerraformDeploy.stubWebApp'] ]
    #       - name : KeyVaultSettings.ServiceUri
    #         value : $[ dependencies.PreProdDeployTerraform.outputs['PreProdDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
    #     workspace:
    #       clean: all
    #     strategy:
    #       runOnce:
    #         deploy:
    #           steps:
    #             - template: Deployment/templates/continuous-deployment-app.yml
    #               parameters:
    #                 AzureSubscription: "S-100 Permit Generator PreProd - A.011.15.5"
  - stage: LiveDeploy
    dependsOn:  PreProdDeploy
    displayName: "LiveDeploy (inc terraform, webapp deploy)"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
    - template: Deployment/templates/continuous-deployment.yml
      parameters:
        AzureDevOpsEnvironment: "S100PG-Live"
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureSubscription: "S-100 Permit Generator Live - A.011.15.5"
        ShortName: "Live"
        AppPool: $(DeploymentPoolPD)
        Container: ${{variables.Container}}
    # variables:
    #   - group: "S-100-PG-Live"
    #   - group: "S-100-PG-Live-TF"
    #   - group: "S-100-PG-Live-KV"
    #   - name: "AzureAdConfiguration.TenantId"
    #     value: $(EntraID.TenantId)
    #   - name: "AzureAdConfiguration.ClientId"
    #     value: $(EntraID.ApplicationId)        
    # jobs:
    #   - deployment: LiveDeployTerraform
    #     displayName: "Live - Deploy Terraform"
    #     environment: "S100PG-Live"
    #     pool: $(DeploymentPool)
    #     container: ${{variables.Container}}
    #     workspace:
    #       clean: all
    #     strategy:
    #       runOnce:
    #         deploy:
    #           steps:
    #             - template: Deployment/templates/continuous-deployment.yml
    #               parameters:
    #                 ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
    #                 AzureSubscription: "S-100 Permit Generator Live - A.011.15.5"

      # - deployment: LiveDeployApp
      #   dependsOn: LiveDeployTerraform
      #   displayName: "Live - Deploy Dotnet App"
      #   environment: "S100PG-Live"
      #   pool: $(DeploymentPoolPD)
      #   variables:
      #     - name : WEB_APP_NAME
      #       value : $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.WEB_APP'] ]
      #     - name : STUB_WEB_APP_NAME
      #       value : $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.stubWebApp'] ]
      #     - name : KeyVaultSettings.ServiceUri
      #       value : $[ dependencies.LiveDeployTerraform.outputs['LiveDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
      #   workspace:
      #     clean: all
      #   strategy:
      #     runOnce:
      #       deploy:
      #         steps:
      #           - template: Deployment/templates/continuous-deployment-app.yml
      #             parameters:
      #               AzureSubscription: "S-100 Permit Generator Live - A.011.15.5"