name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd).$(BuildCounter)

parameters:

  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

  - name: DisableDependencyCheck
    displayName: "Disable OWASP Dependency Checking"
    type: boolean
    default: false

  - name: DisableStryker
    displayName: "Disable Stryker Test Mutation"
    type: boolean
    default: false
    
trigger:
  - main
  - release/*
  - develop 

pool: 
    name: NautilusBuild
    demands: vs_16 -equals 1 #exclude agents 13 and 14 as code coverage report fails 

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: UKHOAssemblyCompany
    value: "UK Hydrographic Office"
  - name: UKHOAssemblyVersionPrefix
    value: "1.0."
  - name: UKHOAssemblyProduct
    value: "S-100 Permit Service"
  - name: UKHOAssemblyCopyright
    value: "Copyright Â© UK Hydrographic Office"
  - name: WindowsPool
    value: "NautilusBuild"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.9.2"
  - name: DeploymentPool
    value: "Mare Nectaris"
  - name: CoverageThresholdLimit
    value: "90"

stages:

  - stage: Stryker_Mutator
    displayName: "Stryker Mutator"
    condition: ${{ eq(parameters.DisableStryker, false) }}
    dependsOn: []
    jobs:
      - job: Stryker      
        workspace:
          clean: all        
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 8.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: DotNetCoreCLI@2
            displayName: 'Install Stryker'
            inputs:
              command: 'custom'
              custom: 'tool'
              arguments: 'install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools'

          - task: Powershell@2
            displayName: 'Run Stryker Permit Service API UnitTests'
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)/tests/UKHO.S100PermitService.API.UnitTests'
              targetType: 'inline'
              pwsh: true
              script: $(Agent.BuildDirectory)/tools/dotnet-stryker

          - task: PublishMutationReport@0
            displayName: 'Publish Strkyer Mutator PS API Report'
            inputs:
              reportPattern: '$(Build.SourcesDirectory)/tests/UKHO.S100PermitService.API.UnitTests/**/mutation-report.html'
              reportDisplayName: 'Permit Service API Mutation Report'

          - task: Powershell@2
            displayName: "Run Stryker Permit Service Common UnitTests"
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)/tests/UKHO.S100PermitService.Common.UnitTests'
              targetType: 'inline'
              pwsh: true
              script: $(Agent.BuildDirectory)/tools/dotnet-stryker

          - task: PublishMutationReport@0
            displayName: 'Publish Strkyer Mutator PS Common Report'
            inputs:
              reportPattern: '$(Build.SourcesDirectory)/tests/UKHO.S100PermitService.Common.UnitTests/**/mutation-report.html'
              reportDisplayName: 'Permit Service Common Mutation Report'

  - stage: PERFORM_DEPENDENCYCHECK_DOTNETBUILD_DOTNETTEST_AND_PUBLISH
    displayName: "Build (DependencyChecker, Dotnet Build & Restore , Dotnet Test and Publish Artifact )"
    dependsOn: []
    jobs:
      - job: Dependencychecker
        pool: NautilusBuild
        condition: eq('${{ parameters.DisableDependencyCheck }}', false)      
        workspace:
          clean: all
        displayName: "Dependencychecker"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\src'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj
                !**/*Tests.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\src'
              packagesDirectory: '$(Build.SourcesDirectory)\src\packagesForAPI'

          - task: CmdLine@1
            displayName: "Run OWASP Dependency Checker"
            inputs:
              filename: 'dependency-check.bat'
              arguments: '--project "s-100-permit-service - $(Build.SourceBranchName)" --scan "$(Build.SourcesDirectory)\src" --out "$(Build.ArtifactStagingDirectory)\DCReport" --suppression $(Build.SourcesDirectory)\NVDSuppressions.xml --noupdate'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: OWASP Dependency Checker Report"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\DCReport'
              ArtifactName: "OWASP Dependency Checker Report"

          - task: PowerShell@1
            displayName: "Fail Build if Dependency Check Finds Any Vulnerabilities"
            inputs:
              scriptType: inlineScript
              arguments: '-ReportLocation $(Build.ArtifactStagingDirectory)\DCReport\*'
              inlineScript: |
                param($ReportLocation)
                Invoke-VulnerabilityCheck -ReportLocation $ReportLocation

      - job: UnitTestsAndCodeCoverage
        workspace:
          clean: all
        displayName: "Dotnet Test and Publish Code Coverage"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET 8.0.x sdk'
            inputs:
              packagetype: sdk
              useglobaljson: true
              workingdirectory: '$(build.sourcesdirectory)\src'

          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore test projects only"
            inputs:
              command: "restore"
              projects: "**/*Tests.csproj"
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)'
              packagesDirectory: '$(Build.SourcesDirectory)\packagesForTests'

          - task: DotNetCoreCLI@2
            displayName: 'Dotnet test - Stub Service Unit Tests'
            inputs:
              command: test
              projects: '**/UKHO.S100PermitService.StubService.UnitTests.csproj'
              publishTestResults: true 

          - task: DotNetCoreCLI@2
            displayName: "Dotnet test - PermitService API Unit Tests"
            inputs:
              command: "test"
              projects: |
                **/*.UnitTests.csproj
                !**/*StubService.UnitTests.csproj
              arguments: '--configuration $(BuildConfiguration) --settings "$(Build.SourcesDirectory)\test.runsettings" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
              publishTestResults: true
              testRunTitle: "UnitTests"

          - task: PowerShell@2
            displayName: "Generate code coverage report"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\CodeCoverageReport.ps1'
              arguments: '-source "$(Build.SourcesDirectory)" -reportFolder "$(Build.ArtifactStagingDirectory)"'

          - task: PublishBuildArtifacts@1
            displayName: "Publish Code coverage"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/codecoveragereport"
              ArtifactName: codecoveragereport

          - task: BuildQualityChecks@9
            displayName: "Code coverage fails if threshold not meet"            
            inputs:
              checkCoverage: true
              coverageFailOption: 'fixed'
              coverageType: 'lines'
              coverageThreshold: '$(CoverageThresholdLimit)'

      - job: BuildAndPublishAPI
        workspace:
          clean: all
        displayName: "Dotnet Build And Publish S-100 Permit Service API"
        steps:

          - task: PowerShell@2
            displayName: "Set assembly version numbers based on build ID"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
              arguments: '-buildNumber "$(Build.BuildNumber)" -solutionDirectory "$(Build.SourcesDirectory)\src\UKHO.S100PermitService.API\" -UKHOAssemblyCompany "$env:UKHOAssemblyCompany" -UKHOAssemblyCopyright "$(UKHOAssemblyCopyright)" -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix" -UKHOAssemblyProduct "$env:UKHOAssemblyProduct"'

          - task: UseDotNet@2
            displayName: 'Use .NET 8.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\src'
              
          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore for non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj
                !**/UKHO.S100PermitService.StubService.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\src'
              packagesDirectory: '$(Build.SourcesDirectory)\src\packages'

          - task: DotNetCoreCLI@2
            displayName: "dotnet build task"
            inputs:
              command: "build"
              projects: |
                **/*.csproj
                !**/UKHO.S100PermitService.StubService.csproj
              arguments: '--configuration $(BuildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: "Publish S-100 Permit Service API "
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: '**/*UKHO.S100PermitService.API.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\UKHO.S100PermitService.API'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: ArchiveFiles@2
            displayName: "Zip S-100 Permit Service"
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/UKHO.S100PermitService.API/'
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.ArtifactStagingDirectory)/UKHO.S100PermitService.API/UKHOS100PermitServiceAPI.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish WebAPI Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\UKHO.S100PermitService.API/UKHOS100PermitServiceAPI.zip'
              ArtifactName: UKHOS100PermitServiceAPI

      - job: BuildAndPublishS100PermitServiceStubService
        workspace:
          clean: all
        displayName: "Dotnet Build And Publish S-100 Permit Service StubService"
        steps:

          - task: PowerShell@2
            displayName: "Set assembly version numbers based on build ID"
            inputs:
              targetType: filePath
              filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
              arguments: '-buildNumber "$(Build.BuildNumber)" -solutionDirectory "$(Build.SourcesDirectory)\src\UKHO.S100PermitService.StubService\" -UKHOAssemblyCompany "$env:UKHOAssemblyCompany" -UKHOAssemblyCopyright "$(UKHOAssemblyCopyright)" -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix" -UKHOAssemblyProduct "$(UKHOAssemblyProduct) StubService"'

          - task: UseDotNet@2
            displayName: 'Use .NET 8.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\src'
              
          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore for s-100 permit service StubService project"
            inputs:
              command: "restore"
              projects: |
                **/UKHO.S100PermitService.StubService.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\UKHO.S100PermitService.StubService'
              packagesDirectory: '$(Build.SourcesDirectory)\UKHO.S100PermitService.StubService\packages'

          - task: DotNetCoreCLI@2
            displayName: "Build S-100 Permit Service StubService Project"
            inputs:
              command: "build"
              projects: |
                **/UKHO.S100PermitService.StubService.csproj
              arguments: '--configuration $(BuildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: "Publish S-100 Permit Service StubService"
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: '**/UKHO.S100PermitService.StubService.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\S100PermitServiceStubService'
              zipAfterPublish: true
              modifyOutputPath: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish S-100 Permit Service StubService Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\S100PermitServiceStubService'
              ArtifactName: UKHOS100PermitServiceStubService
              
      - job: PublishFunctionalTestsAndTerraform
        workspace:
          clean: all
        displayName: "Publish FunctionalTests and Terraform Artifact"
        steps:

          - task: UseDotNet@2
            displayName: 'Use .NET 8.0.x sdk'
            inputs:
              packageType: sdk
              useGlobalJson: true
              workingDirectory: '$(Build.SourcesDirectory)\src'
              
          - task: DotNetCoreCLI@2
            displayName: ".Net Core - NuGet restore for non test projects only"
            inputs:
              command: "restore"
              projects: |
                **/*.csproj
                **/UKHO.S100PermitService.StubService.csproj                
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
              workingDirectory: '$(Build.SourcesDirectory)\src'
              packagesDirectory: '$(Build.SourcesDirectory)\src\packages'

          - task: DotNetCoreCLI@2
            displayName: "Publish Functional Test Code "
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: '$(Build.SourcesDirectory)\tests\UKHO.S100PermitService.API.FunctionalTests\UKHO.S100PermitService.API.FunctionalTests.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\UKHO.S100PermitService.API.FunctionalTests'
              workingDirectory: '$(Build.SourcesDirectory)\tests\UKHO.S100PermitService.API.FunctionalTests'
              zipAfterPublish: false
              modifyOutputPath: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish Functional test Artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\UKHO.S100PermitService.API.FunctionalTests'
              ArtifactName: functionaltests

          - task: PublishBuildArtifacts@1
            displayName: "Publish terraform Artifacts"
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)\Deployment'
              ArtifactName: terraformartifact

  - stage: Devdeploy
    displayName: "Devdeploy (inc terraform, webapp deploy)"
    variables:
      - group: "S-100-PG-Dev"
      - group: "S-100-PG-Dev-TF"
      - group: "S-100-PG-Dev-KV"
      - name: "AzureAdConfiguration.TenantId"
        value: $(EntraID.TenantId)
      - name: "AzureAdConfiguration.ClientId"
        value: $(EntraID.ApplicationId)
      - name: "UserPermitServiceApiConfiguration.ClientId"
        value: $(EntraID.ApplicationId)
      - name: "ProductKeyServiceApiConfiguration.ClientId"
        value: $(EntraID.ApplicationId)
    jobs:
      - deployment: DevDeployTerraform
        displayName: "Dev - Deploy Terraform"
        environment: "S100PG-DEV"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "S-100 Permit Generator Dev - A.011.15.5"

      - deployment: DevDeployApp
        dependsOn: DevDeployTerraform
        displayName: "Dev - Deploy Dotnet App"
        environment: "S100PG-DEV"
        pool: $(DeploymentPool)
        variables:
          - name : WEB_APP_NAME
            value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.WEB_APP'] ]
          - name : STUB_WEB_APP_NAME
            value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.stubWebApp'] ]
          - name : KeyVaultSettings.ServiceUri
            value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment-app.yml
                  parameters:
                    AzureSubscription: "S-100 Permit Generator Dev - A.011.15.5"
  
      - job: FunctionalTests
        dependsOn:
        - DevDeployTerraform
        - DevDeployApp
        pool: $(DeploymentPool)
        variables:
          - name: "TokenConfiguration.TenantId"
            value: $(EntraID.TenantId)
          - name: "TokenConfiguration.ClientId"
            value: $(EntraID.ApplicationId)
          - name: "TokenConfiguration.ClientIdWithAuth"
            value: $(EntraID.AutoTest.ApplicationId)
          - name: "TokenConfiguration.ClientIdNoAuth"
            value: $(EntraID.AutoTestNoAuth.ApplicationId)
          - name: "TokenConfiguration.ClientSecret"
            value: $(TokenConfiguration--ClientSecret)
          - name: "TokenConfiguration.ClientSecretNoAuth"
            value: $(TokenConfiguration--ClientSecretNoAuth)
          - name : KeyVaultSettings.ServiceUri
            value : $[ dependencies.DevDeployTerraform.outputs['DevDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
        displayName: "Dev Functional Automated Tests"
        workspace:
         clean: all
        steps:
          - template: Deployment/templates/continuous-testing.yml
            parameters:
              AzureSubscription: "S-100 Permit Generator Dev - A.011.15.5"

  - stage: vNextIATDeploy
    dependsOn:  Devdeploy
    displayName: "vNext IATdeploy (inc terraform, webapp deploy)"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'),startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/'),startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')))
    variables:
      - group: "S-100-PG-vNextIAT"
      - group: "S-100-PG-vNextIAT-TF"
      - group: "S-100-PG-vNextIAT-KV"
      - name: "AzureAdConfiguration.TenantId"
        value: $(EntraID.TenantId)
      - name: "AzureAdConfiguration.ClientId"
        value: $(EntraID.ApplicationId)
      - name: "UserPermitServiceApiConfiguration.ClientId"
        value: $(EntraID.ApplicationId)  
      - name: "ProductKeyServiceApiConfiguration.ClientId"
        value: $(EntraID.ApplicationId)
    jobs:
      - deployment: vNextIATDeployTerraform
        displayName: "vNextIAT - Deploy Terraform"
        environment: "S100PG-VNEXTIAT"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "S-100 Permit Generator vNext-IAT - A.011.15.5"

      - deployment: vNextIATDeployApp
        dependsOn: vNextIATDeployTerraform
        displayName: "vNextIAT - Deploy Dotnet App"
        environment: "S100PG-VNEXTIAT"
        pool: $(DeploymentPool)
        variables:
          - name : WEB_APP_NAME
            value : $[ dependencies.vNextIATDeployTerraform.outputs['vNextIATDeployTerraform.TerraformDeploy.WEB_APP'] ]
          - name : STUB_WEB_APP_NAME
            value : $[ dependencies.vNextIATDeployTerraform.outputs['vNextIATDeployTerraform.TerraformDeploy.stubWebApp'] ]
          - name : KeyVaultSettings.ServiceUri
            value : $[ dependencies.vNextIATDeployTerraform.outputs['vNextIATDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment-app.yml
                  parameters:
                    AzureSubscription: "S-100 Permit Generator vNext-IAT - A.011.15.5"
  
  - stage: vNextE2EDeploy
    dependsOn: vNextIATDeploy
    displayName: "vNextE2Edeploy (inc terraform, webapp deploy)"    
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'),startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/'),startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')))
    variables:
      - group: "S-100-PG-vNextE2E"
      - group: "S-100-PG-vNextE2E-TF"
      - group: "S-100-PG-vNextE2E-KV"
      - name: "AzureAdConfiguration.TenantId"
        value: $(EntraID.TenantId)
      - name: "AzureAdConfiguration.ClientId"
        value: $(EntraID.ApplicationId)
      - name: "UserPermitServiceApiConfiguration.ClientId"
        value: $(EntraID.ApplicationId)  
      - name: "ProductKeyServiceApiConfiguration.ClientId"
        value: $(EntraID.ApplicationId)
    jobs:
      - deployment: vNextE2EDeployTerraform
        displayName: "vNextE2E - Deploy Terraform"
        environment: "S100PG-VNEXTE2E"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "S-100 Permit Generator vNext-E2E - A.011.15.5"

      - deployment: vNextE2EDeployApp
        dependsOn: vNextE2EDeployTerraform
        displayName: "vNextE2E - Deploy Dotnet App"
        environment: "S100PG-VNEXTE2E"
        pool: $(DeploymentPool)
        variables:
          - name : WEB_APP_NAME
            value : $[ dependencies.vNextE2EDeployTerraform.outputs['vNextE2EDeployTerraform.TerraformDeploy.WEB_APP'] ]
          - name : STUB_WEB_APP_NAME
            value : $[ dependencies.vNextE2EDeployTerraform.outputs['vNextE2EDeployTerraform.TerraformDeploy.stubWebApp'] ]
          - name : KeyVaultSettings.ServiceUri
            value : $[ dependencies.vNextE2EDeployTerraform.outputs['vNextE2EDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment-app.yml
                  parameters:
                    AzureSubscription: "S-100 Permit Generator vNext-E2E - A.011.15.5"
  
  - stage: IATDeploy
    dependsOn:  Devdeploy
    displayName: "IATdeploy (inc terraform, webapp deploy)"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    variables:
      - group: "S-100-PG-IAT"
      - group: "S-100-PG-IAT-TF"
      - group: "S-100-PG-IAT-KV"
      - name: "AzureAdConfiguration.TenantId"
        value: $(EntraID.TenantId)
      - name: "AzureAdConfiguration.ClientId"
        value: $(EntraID.ApplicationId)
      - name: "UserPermitServiceApiConfiguration.ClientId"
        value: $(EntraID.ApplicationId)
      - name: "ProductKeyServiceApiConfiguration.ClientId"
        value: $(EntraID.ApplicationId)
    jobs:
      - deployment: IATDeployTerraform
        displayName: "IAT - Deploy Terraform"
        environment: "S100PG-IAT"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "S-100 Permit Generator IAT - A.011.15.5"

      - deployment: IATDeployApp
        dependsOn: IATDeployTerraform
        displayName: "IAT - Deploy Dotnet App"
        environment: "S100PG-IAT"
        pool: $(DeploymentPool)
        variables:
          - name : WEB_APP_NAME
            value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.WEB_APP'] ]
          - name : STUB_WEB_APP_NAME
            value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.stubWebApp'] ]
          - name : KeyVaultSettings.ServiceUri
            value : $[ dependencies.IATDeployTerraform.outputs['IATDeployTerraform.TerraformDeploy.KeyVaultServiceUri'] ]
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment-app.yml
                  parameters:
                    AzureSubscription: "S-100 Permit Generator IAT - A.011.15.5"